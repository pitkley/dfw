var searchIndex={};
searchIndex["dfw"] = {"doc":"DFW - Docker Firewall Framework in Rust","i":[[0,"errors","dfw","Errors, using [`failure`][failure].",null,null],[4,"DFWError","dfw::errors","",null,null],[13,"NFTablesError","","",0,null],[12,"stdout","dfw::errors::DFWError","",1,null],[12,"stderr","","",1,null],[13,"TraitMethodUnimplemented","dfw::errors","",0,null],[12,"method","dfw::errors::DFWError","",2,null],[6,"Result","dfw::errors","",null,null],[0,"iptables","dfw","This module implements the iptables backend for DFW.",null,null],[3,"Iptables","dfw::iptables","Marker struct to implement iptables as a firewall backend.",null,null],[4,"IptablesRule","","Rule representation for iptables firewall backend.",null,null],[13,"V4","","IPv4",3,null],[13,"V6","","IPv6",3,null],[4,"IptablesRuleDiscriminants","","Auto-generated discriminant enum variants",null,null],[13,"V4","","IPv4",4,null],[13,"V6","","IPv6",4,null],[4,"PolicyOrRule","","Policy or rule representation for iptables firewall backend.",null,null],[13,"Policy","","Rule specifying a chain policy.",5,null],[12,"table","dfw::iptables::PolicyOrRule","Associated iptables table.",6,null],[12,"chain","","Associated iptables chain.",6,null],[12,"policy","","Policy to set.",6,null],[13,"Rule","dfw::iptables","Actual filter rule that will be added to a chain.",5,null],[12,"table","dfw::iptables::PolicyOrRule","Associated iptables table.",7,null],[12,"chain","","Associated iptables chain.",7,null],[12,"value","","The rule itself in valid iptables syntax.",7,null],[0,"types","dfw::iptables","The types in this module make up the structure of the…",null,null],[3,"Defaults","dfw::iptables::types","The defaults/configuration for the iptables backend.",null,null],[12,"initialization","","The optional initialization section.",8,null],[3,"Initialization","","The initialization section allows you to add custom rules…",null,null],[12,"v4","","Initialization rules for iptables (IPv4). Expects a map…",9,null],[12,"v6","","Initialization rules for ip6tables (IPv6). Expects a map…",9,null],[11,"get_rules","dfw::iptables","Retrieve the current text that would be passed to…",10,[[["vec",["iptablesrule"]],["iptablesrulediscriminants"],["iptablesrule"]],[["vec",["string"]],["string"]]]],[0,"nftables","dfw","This module implements the nftables backend for DFW.",null,null],[3,"Nftables","dfw::nftables","Marker struct to implement nftables as a firewall backend.",null,null],[4,"Family","","Representation of nftables table-families.",null,null],[13,"Ip","","IPv4 table family",11,null],[13,"Ip6","","IPv6 table family",11,null],[13,"Inet","","Dualstack IPv4/IPv6 table family",11,null],[13,"Arp","","ARP table family",11,null],[13,"Bridge","","Bridge table family",11,null],[13,"Netdev","","Netdev table family",11,null],[4,"Type","","Representation of nftables chain-types.",null,null],[13,"Filter","","Is used to filter packets.",12,null],[13,"Route","","Is used to reroute packets if any relevant IP header field…",12,null],[13,"Nat","","Is used to perform Networking Address Translation (NAT).",12,null],[4,"Hook","","Representation of nftables chain hooks.",null,null],[13,"Ingress","","Ingress allows traffic-filtering before pre-routing, after…",13,null],[13,"Prerouting","","Prerouting allows traffic-filtering before the packets…",13,null],[13,"Input","","Input allows traffic-filtering for packets that have been…",13,null],[13,"Forward","","Forward allows traffic-filtering for packets that were not…",13,null],[13,"Output","","Output allows traffic-filtering for packets leaving the…",13,null],[13,"Postrouting","","Postrouting allows traffic-filtering for already routed…",13,null],[0,"types","","The types in this module make up the structure of the…",null,null],[3,"Defaults","dfw::nftables::types","The defaults/configuration for the nftables backend.",null,null],[12,"custom_tables","","Specify the names of custom nft-tables that should be…",14,null],[12,"initialization","","The optional initialization section.",14,null],[3,"Table","","Reference to an nftables table, specifically to the input-…",null,null],[12,"name","","Name of the custom table.",15,null],[12,"chains","","Names of the input and forward chains defined within the…",15,null],[3,"Initialization","","The initialization section allows you to execute any…",null,null],[12,"rules","","Initialization rules for nftables",16,null],[0,"process","dfw","This module holds the types related to configuration…",null,null],[3,"ProcessContext","dfw::process","Enclosing struct to manage rule processing.",null,null],[3,"ProcessingOptions","","Options to configure the processing procedure.",null,null],[12,"container_filter","","Option to filter the containers to be processed, see…",17,null],[4,"ContainerFilter","","Option to filter the containers to be processed",null,null],[13,"All","","Process all containers, i.e. don't filter.",18,null],[13,"Running","","Only process running containers.",18,null],[8,"Process","","This trait allows a type to define its own processing…",null,null],[10,"process","","Process the current type within the given…",19,[[["self"],["processcontext"]],[["option",["vec"]],["result",["option"]]]]],[11,"new","","Create a new instance of `ProcessDFW` for rule processing.",20,[[["bool"],["processingoptions"],["docker"],["dfw"],["logger"]],[["processcontext"],["result",["processcontext"]]]]],[11,"process","","Start the processing using the configuration given at…",20,[[["self"]],["result"]]],[0,"types","dfw","The types in this module make up the structure of the…",null,null],[3,"DFW","dfw::types","`DFW` is the parent type defining the complete…",null,null],[12,"global_defaults","","The `defaults` configuration section.",21,null],[12,"backend_defaults","","The `backend_defaults` configuration section",21,null],[12,"initialization","","This field is DEPRECATED!",21,null],[12,"container_to_container","","The `container_to_container` configuration section",21,null],[12,"container_to_wider_world","","The `container_to_wider_world` configuration section",21,null],[12,"container_to_host","","The `container_to_host` configuration section",21,null],[12,"wider_world_to_container","","The `wider_world_to_container` configuration section",21,null],[12,"container_dnat","","The `container_dnat` configuration section",21,null],[3,"GlobalDefaults","","The default configuration section, used by DFW for rule…",null,null],[12,"external_network_interfaces","","This defines the external network interfaces of the host…",22,null],[12,"default_docker_bridge_to_host_policy","","This defines whether the default Docker bridge (usually…",22,null],[12,"custom_tables","","This field is DEPRECATED!",22,null],[3,"ContainerToContainer","","The container-to-container section, defining how…",null,null],[12,"default_policy","","The `default_policy` defines the default for when there is…",23,null],[12,"rules","","An optional list of rules, see `ContainerToContainerRule`.",23,null],[3,"ContainerToContainerRule","","Definition for a rule to be used in the…",null,null],[12,"network","","Common network between the source container and the…",24,null],[12,"src_container","","Source container to apply the rule to.",24,null],[12,"dst_container","","Destination container to apply the rule to.",24,null],[12,"matches","","Additional match-string, which will be added to the…",24,null],[12,"verdict","","Verdict for rule (accept, drop or reject).",24,null],[3,"ContainerToWiderWorld","","The container-to-wider-world section, defining how…",null,null],[12,"default_policy","","The `default_policy` defines the default for when there is…",25,null],[12,"rules","","An optional list of rules, see `ContainerToWiderWorldRule`.",25,null],[3,"ContainerToWiderWorldRule","","Definition for a rule to be used in the…",null,null],[12,"network","","Network of the source container to apply the rule to.",26,null],[12,"src_container","","Source container to apply the rule to.",26,null],[12,"matches","","Additional match-string, which will be added to the…",26,null],[12,"verdict","","Verdict for rule (accept, drop or reject).",26,null],[12,"external_network_interface","","Specific external network interface to target.",26,null],[3,"ContainerToHost","","The container-to-host section, defining how containers can…",null,null],[12,"default_policy","","The `default_policy` defines the default for when there is…",27,null],[12,"rules","","An optional list of rules, see `ContainerToHostRule`.",27,null],[3,"ContainerToHostRule","","Definition for a rule to be used in the container-to-host…",null,null],[12,"network","","Network of the source container to apply the rule to.",28,null],[12,"src_container","","Source container to apply the rule to.",28,null],[12,"matches","","Additional match-string, which will be added to the…",28,null],[12,"verdict","","Verdict for rule (accept, drop or reject).",28,null],[3,"WiderWorldToContainer","","The wider-world-to-container section, defining how…",null,null],[12,"rules","","An optional list of rules, see `WiderWorldToContainerRule`.",29,null],[3,"WiderWorldToContainerRule","","Definition for a rule to be used in the…",null,null],[12,"network","","Network of the destination container to apply the rule to.",30,null],[12,"dst_container","","Destination container to apply the rule to.",30,null],[12,"expose_port","","Ports to apply the rule to.",30,null],[12,"external_network_interface","","Specific external network interface to target.",30,null],[12,"expose_via_ipv6","","Configure if the container should be exposed via IPv6,…",30,null],[12,"source_cidr_v4","","Source CIDRs (IPv4) to which incoming traffic should be…",30,null],[12,"source_cidr_v6","","Source CIDRs (IPv6) to which incoming traffic should be…",30,null],[3,"ExposePort","","Struct to hold a port definition to expose on the…",null,null],[12,"host_port","","Port the `container_port` should be exposed to on the host.",31,null],[12,"container_port","","Port the `host_port` should map to into the container.",31,null],[12,"family","","Family of the exposed port.",31,null],[3,"ExposePortBuilder","","Builder for `ExposePort`.",null,null],[12,"host_port","","Port the `container_port` should be exposed to on the host.",32,null],[12,"container_port","","Port the `host_port` should map to into the container.",32,null],[12,"family","","Family of the exposed port.",32,null],[3,"ContainerDNAT","","The container-DNAT section, defining how containers can…",null,null],[12,"rules","","An optional list of rules, see `ContainerDNATRule`.",33,null],[3,"ContainerDNATRule","","Definition for a rule to be used in the container-DNAT…",null,null],[12,"src_network","","Network of the source container to apply the rule to.",34,null],[12,"src_container","","Source container to apply the rule to.",34,null],[12,"dst_network","","Network of the destination container to apply the rule to.",34,null],[12,"dst_container","","Destination container to apply the rule to.",34,null],[12,"expose_port","","Ports to apply the rule to.",34,null],[4,"ChainPolicy","","Representation of chain policies.",null,null],[13,"Accept","","The accept verdict means that the packet will keep…",35,null],[13,"Drop","","The drop verdict means that the packet is discarded if the…",35,null],[4,"RuleVerdict","","Representation of rule policies.",null,null],[13,"Accept","","The accept verdict means that the packet will keep…",36,null],[13,"Drop","","The drop verdict means that the packet is discarded if the…",36,null],[13,"Reject","","The reject verdict means that the packet is responded to…",36,null],[11,"host_port","","Port the `container_port` should be exposed to on the host.",32,[[["u16"],["self"]],["self"]]],[11,"container_port","","Port the `host_port` should map to into the container.",32,[[["option",["u16"]],["self"],["u16"]],["self"]]],[11,"family","","Family of the exposed port.",32,[[["self"],["string"]],["self"]]],[11,"build","","Builds a new `ExposePort`.",32,[[["self"]],[["exposeport"],["result",["exposeport","string"]],["string"]]]],[0,"util","dfw","Utilities module",null,null],[5,"load_file","dfw::util","Load single TOML-file from path and deserialize it into…",null,[[["str"]],["result"]]],[5,"load_path","","Load all TOML-files from a path, concatenate their…",null,[[["str"]],["result"]]],[8,"FutureExt","","An extension trait for `Future` allowing synchronized…",null,null],[11,"sync","","Execute future synchronously, blocking until a result can…",37,[[],["result"]]],[8,"FirewallBackend","dfw","This trait is used to distinguish between different…",null,null],[16,"Rule","","Associated type identifying the rule-type returned.",38,null],[16,"Defaults","","Associated type representing the firewall backend…",38,null],[10,"apply","","Apply the processed rules.",38,[[["processcontext"],["vec"]],["result"]]],[11,"from","dfw::errors","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"as_fail","","",0,[[["self"]],["fail"]]],[11,"vzip","","",0,[[],["v"]]],[11,"from","dfw::iptables","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"vzip","","",10,[[],["v"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"vzip","","",3,[[],["v"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"equivalent","","",4,[[["k"],["self"]],["bool"]]],[11,"vzip","","",4,[[],["v"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"vzip","","",5,[[],["v"]]],[11,"from","dfw::iptables::types","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,[[["self"],["t"]]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"equivalent","","",8,[[["k"],["self"]],["bool"]]],[11,"vzip","","",8,[[],["v"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,[[["self"],["t"]]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"equivalent","","",9,[[["k"],["self"]],["bool"]]],[11,"vzip","","",9,[[],["v"]]],[11,"from","dfw::nftables","",39,[[["t"]],["t"]]],[11,"into","","",39,[[],["u"]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"try_into","","",39,[[],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"type_id","","",39,[[["self"]],["typeid"]]],[11,"vzip","","",39,[[],["v"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,[[["self"],["t"]]]],[11,"to_string","","",11,[[["self"]],["string"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"vzip","","",11,[[],["v"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,[[["self"],["t"]]]],[11,"to_string","","",12,[[["self"]],["string"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"vzip","","",12,[[],["v"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,[[["self"],["t"]]]],[11,"to_string","","",13,[[["self"]],["string"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"vzip","","",13,[[],["v"]]],[11,"from","dfw::nftables::types","",14,[[["t"]],["t"]]],[11,"into","","",14,[[],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,[[["self"],["t"]]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"equivalent","","",14,[[["k"],["self"]],["bool"]]],[11,"vzip","","",14,[[],["v"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,[[["self"],["t"]]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"equivalent","","",15,[[["k"],["self"]],["bool"]]],[11,"vzip","","",15,[[],["v"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,[[["self"],["t"]]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"equivalent","","",16,[[["k"],["self"]],["bool"]]],[11,"vzip","","",16,[[],["v"]]],[11,"from","dfw::process","",20,[[["t"]],["t"]]],[11,"into","","",20,[[],["u"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"try_into","","",20,[[],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"type_id","","",20,[[["self"]],["typeid"]]],[11,"vzip","","",20,[[],["v"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,[[["self"],["t"]]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"equivalent","","",17,[[["k"],["self"]],["bool"]]],[11,"vzip","","",17,[[],["v"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,[[["self"],["t"]]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"try_into","","",18,[[],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"type_id","","",18,[[["self"]],["typeid"]]],[11,"equivalent","","",18,[[["k"],["self"]],["bool"]]],[11,"vzip","","",18,[[],["v"]]],[11,"from","dfw::types","",21,[[["t"]],["t"]]],[11,"into","","",21,[[],["u"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,[[["self"],["t"]]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"try_into","","",21,[[],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"type_id","","",21,[[["self"]],["typeid"]]],[11,"equivalent","","",21,[[["k"],["self"]],["bool"]]],[11,"vzip","","",21,[[],["v"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[],["u"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,[[["self"],["t"]]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"try_into","","",22,[[],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"type_id","","",22,[[["self"]],["typeid"]]],[11,"equivalent","","",22,[[["k"],["self"]],["bool"]]],[11,"vzip","","",22,[[],["v"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[],["u"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,[[["self"],["t"]]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"try_into","","",23,[[],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"type_id","","",23,[[["self"]],["typeid"]]],[11,"equivalent","","",23,[[["k"],["self"]],["bool"]]],[11,"vzip","","",23,[[],["v"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[],["u"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,[[["self"],["t"]]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"try_into","","",24,[[],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"type_id","","",24,[[["self"]],["typeid"]]],[11,"equivalent","","",24,[[["k"],["self"]],["bool"]]],[11,"vzip","","",24,[[],["v"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[],["u"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,[[["self"],["t"]]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"try_into","","",25,[[],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"type_id","","",25,[[["self"]],["typeid"]]],[11,"equivalent","","",25,[[["k"],["self"]],["bool"]]],[11,"vzip","","",25,[[],["v"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,[[["self"],["t"]]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"try_into","","",26,[[],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"type_id","","",26,[[["self"]],["typeid"]]],[11,"equivalent","","",26,[[["k"],["self"]],["bool"]]],[11,"vzip","","",26,[[],["v"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"into","","",27,[[],["u"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,[[["self"],["t"]]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"try_into","","",27,[[],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"type_id","","",27,[[["self"]],["typeid"]]],[11,"equivalent","","",27,[[["k"],["self"]],["bool"]]],[11,"vzip","","",27,[[],["v"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,[[["self"],["t"]]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"try_into","","",28,[[],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"type_id","","",28,[[["self"]],["typeid"]]],[11,"equivalent","","",28,[[["k"],["self"]],["bool"]]],[11,"vzip","","",28,[[],["v"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"into","","",29,[[],["u"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,[[["self"],["t"]]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"try_into","","",29,[[],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"type_id","","",29,[[["self"]],["typeid"]]],[11,"equivalent","","",29,[[["k"],["self"]],["bool"]]],[11,"vzip","","",29,[[],["v"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"into","","",30,[[],["u"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,[[["self"],["t"]]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"try_into","","",30,[[],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"type_id","","",30,[[["self"]],["typeid"]]],[11,"equivalent","","",30,[[["k"],["self"]],["bool"]]],[11,"vzip","","",30,[[],["v"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"into","","",31,[[],["u"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,[[["self"],["t"]]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"try_into","","",31,[[],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"type_id","","",31,[[["self"]],["typeid"]]],[11,"equivalent","","",31,[[["k"],["self"]],["bool"]]],[11,"vzip","","",31,[[],["v"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"into","","",32,[[],["u"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,[[["self"],["t"]]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"try_into","","",32,[[],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"type_id","","",32,[[["self"]],["typeid"]]],[11,"vzip","","",32,[[],["v"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into","","",33,[[],["u"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,[[["self"],["t"]]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"try_into","","",33,[[],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"type_id","","",33,[[["self"]],["typeid"]]],[11,"equivalent","","",33,[[["k"],["self"]],["bool"]]],[11,"vzip","","",33,[[],["v"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"into","","",34,[[],["u"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,[[["self"],["t"]]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"try_into","","",34,[[],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"type_id","","",34,[[["self"]],["typeid"]]],[11,"equivalent","","",34,[[["k"],["self"]],["bool"]]],[11,"vzip","","",34,[[],["v"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"into","","",35,[[],["u"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,[[["self"],["t"]]]],[11,"to_string","","",35,[[["self"]],["string"]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"try_into","","",35,[[],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"type_id","","",35,[[["self"]],["typeid"]]],[11,"equivalent","","",35,[[["k"],["self"]],["bool"]]],[11,"vzip","","",35,[[],["v"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"into","","",36,[[],["u"]]],[11,"to_owned","","",36,[[["self"]],["t"]]],[11,"clone_into","","",36,[[["self"],["t"]]]],[11,"to_string","","",36,[[["self"]],["string"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"try_into","","",36,[[],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"type_id","","",36,[[["self"]],["typeid"]]],[11,"equivalent","","",36,[[["k"],["self"]],["bool"]]],[11,"vzip","","",36,[[],["v"]]],[11,"process","","",21,[[["processcontext"],["self"]],[["option",["vec"]],["result",["option"]]]]],[11,"process","","",22,[[["processcontext"],["self"]],[["option",["vec"]],["result",["option"]]]]],[11,"process","","",23,[[["processcontext"],["self"]],[["option",["vec"]],["result",["option"]]]]],[11,"process","","",24,[[["processcontext"],["self"]],[["option",["vec"]],["result",["option"]]]]],[11,"process","","",25,[[["processcontext"],["self"]],[["option",["vec"]],["result",["option"]]]]],[11,"process","","",26,[[["processcontext"],["self"]],[["option",["vec"]],["result",["option"]]]]],[11,"process","","",27,[[["processcontext"],["self"]],[["option",["vec"]],["result",["option"]]]]],[11,"process","","",28,[[["processcontext"],["self"]],[["option",["vec"]],["result",["option"]]]]],[11,"process","","",29,[[["processcontext"],["self"]],[["option",["vec"]],["result",["option"]]]]],[11,"process","","",30,[[["processcontext"],["self"]],[["option",["vec"]],["result",["option"]]]]],[11,"process","","",33,[[["processcontext"],["self"]],[["option",["vec"]],["result",["option"]]]]],[11,"process","","",34,[[["processcontext"],["self"]],[["option",["vec"]],["result",["option"]]]]],[11,"process","","",21,[[["processcontext"],["self"]],[["result",["option"]],["option",["vec"]]]]],[11,"process","","",22,[[["processcontext"],["self"]],[["result",["option"]],["option",["vec"]]]]],[11,"process","","",23,[[["processcontext"],["self"]],[["result",["option"]],["option",["vec"]]]]],[11,"process","","",24,[[["processcontext"],["self"]],[["result",["option"]],["option",["vec"]]]]],[11,"process","","",25,[[["processcontext"],["self"]],[["result",["option"]],["option",["vec"]]]]],[11,"process","","",26,[[["processcontext"],["self"]],[["result",["option"]],["option",["vec"]]]]],[11,"process","","",27,[[["processcontext"],["self"]],[["result",["option"]],["option",["vec"]]]]],[11,"process","","",28,[[["processcontext"],["self"]],[["result",["option"]],["option",["vec"]]]]],[11,"process","","",29,[[["processcontext"],["self"]],[["result",["option"]],["option",["vec"]]]]],[11,"process","","",30,[[["processcontext"],["self"]],[["result",["option"]],["option",["vec"]]]]],[11,"process","","",33,[[["processcontext"],["self"]],[["result",["option"]],["option",["vec"]]]]],[11,"process","","",34,[[["processcontext"],["self"]],[["result",["option"]],["option",["vec"]]]]],[11,"apply","dfw::iptables","",10,[[["processcontext"],["vec"]],["result"]]],[11,"apply","dfw::nftables","",39,[[["processcontext"],["vec"]],["result"]]],[11,"from","dfw::iptables","",4,[[["iptablesrule"]],["iptablesrulediscriminants"]]],[11,"from","","",4,[[["iptablesrule"]],["iptablesrulediscriminants"]]],[11,"clone","dfw::iptables::types","",8,[[["self"]],["defaults"]]],[11,"clone","","",9,[[["self"]],["initialization"]]],[11,"clone","dfw::iptables","",3,[[["self"]],["iptablesrule"]]],[11,"clone","","",4,[[["self"]],["iptablesrulediscriminants"]]],[11,"clone","","",5,[[["self"]],["policyorrule"]]],[11,"clone","dfw::nftables::types","",14,[[["self"]],["defaults"]]],[11,"clone","","",15,[[["self"]],["table"]]],[11,"clone","","",16,[[["self"]],["initialization"]]],[11,"clone","dfw::nftables","",11,[[["self"]],["family"]]],[11,"clone","","",12,[[["self"]],["type"]]],[11,"clone","","",13,[[["self"]],["hook"]]],[11,"clone","dfw::process","",18,[[["self"]],["containerfilter"]]],[11,"clone","","",17,[[["self"]],["processingoptions"]]],[11,"clone","dfw::types","",21,[[["self"]],["dfw"]]],[11,"clone","","",22,[[["self"]],["globaldefaults"]]],[11,"clone","","",23,[[["self"]],["containertocontainer"]]],[11,"clone","","",24,[[["self"]],["containertocontainerrule"]]],[11,"clone","","",25,[[["self"]],["containertowiderworld"]]],[11,"clone","","",26,[[["self"]],["containertowiderworldrule"]]],[11,"clone","","",27,[[["self"]],["containertohost"]]],[11,"clone","","",28,[[["self"]],["containertohostrule"]]],[11,"clone","","",29,[[["self"]],["widerworldtocontainer"]]],[11,"clone","","",30,[[["self"]],["widerworldtocontainerrule"]]],[11,"clone","","",31,[[["self"]],["exposeport"]]],[11,"clone","","",32,[[["self"]],["exposeportbuilder"]]],[11,"clone","","",33,[[["self"]],["containerdnat"]]],[11,"clone","","",34,[[["self"]],["containerdnatrule"]]],[11,"clone","","",35,[[["self"]],["chainpolicy"]]],[11,"clone","","",36,[[["self"]],["ruleverdict"]]],[11,"default","dfw::nftables::types","",14,[[],["defaults"]]],[11,"default","","",15,[[],["table"]]],[11,"default","","",16,[[],["initialization"]]],[11,"default","dfw::process","",17,[[],["self"]]],[11,"default","dfw::types","",22,[[],["globaldefaults"]]],[11,"default","","",31,[[],["exposeport"]]],[11,"default","","",32,[[],["exposeportbuilder"]]],[11,"default","","",35,[[],["chainpolicy"]]],[11,"default","","",36,[[],["ruleverdict"]]],[11,"eq","dfw::iptables::types","",8,[[["defaults"],["self"]],["bool"]]],[11,"ne","","",8,[[["defaults"],["self"]],["bool"]]],[11,"eq","","",9,[[["initialization"],["self"]],["bool"]]],[11,"ne","","",9,[[["initialization"],["self"]],["bool"]]],[11,"eq","dfw::iptables","",4,[[["iptablesrulediscriminants"],["self"]],["bool"]]],[11,"eq","dfw::nftables::types","",14,[[["defaults"],["self"]],["bool"]]],[11,"ne","","",14,[[["defaults"],["self"]],["bool"]]],[11,"eq","","",15,[[["self"],["table"]],["bool"]]],[11,"ne","","",15,[[["self"],["table"]],["bool"]]],[11,"eq","","",16,[[["self"],["initialization"]],["bool"]]],[11,"ne","","",16,[[["self"],["initialization"]],["bool"]]],[11,"eq","dfw::process","",18,[[["self"],["containerfilter"]],["bool"]]],[11,"eq","","",17,[[["processingoptions"],["self"]],["bool"]]],[11,"ne","","",17,[[["processingoptions"],["self"]],["bool"]]],[11,"eq","dfw::types","",21,[[["dfw"],["self"]],["bool"]]],[11,"ne","","",21,[[["dfw"],["self"]],["bool"]]],[11,"eq","","",22,[[["globaldefaults"],["self"]],["bool"]]],[11,"ne","","",22,[[["globaldefaults"],["self"]],["bool"]]],[11,"eq","","",23,[[["containertocontainer"],["self"]],["bool"]]],[11,"ne","","",23,[[["containertocontainer"],["self"]],["bool"]]],[11,"eq","","",24,[[["self"],["containertocontainerrule"]],["bool"]]],[11,"ne","","",24,[[["self"],["containertocontainerrule"]],["bool"]]],[11,"eq","","",25,[[["self"],["containertowiderworld"]],["bool"]]],[11,"ne","","",25,[[["self"],["containertowiderworld"]],["bool"]]],[11,"eq","","",26,[[["self"],["containertowiderworldrule"]],["bool"]]],[11,"ne","","",26,[[["self"],["containertowiderworldrule"]],["bool"]]],[11,"eq","","",27,[[["containertohost"],["self"]],["bool"]]],[11,"ne","","",27,[[["containertohost"],["self"]],["bool"]]],[11,"eq","","",28,[[["containertohostrule"],["self"]],["bool"]]],[11,"ne","","",28,[[["containertohostrule"],["self"]],["bool"]]],[11,"eq","","",29,[[["widerworldtocontainer"],["self"]],["bool"]]],[11,"ne","","",29,[[["widerworldtocontainer"],["self"]],["bool"]]],[11,"eq","","",30,[[["widerworldtocontainerrule"],["self"]],["bool"]]],[11,"ne","","",30,[[["widerworldtocontainerrule"],["self"]],["bool"]]],[11,"eq","","",31,[[["exposeport"],["self"]],["bool"]]],[11,"ne","","",31,[[["exposeport"],["self"]],["bool"]]],[11,"eq","","",33,[[["self"],["containerdnat"]],["bool"]]],[11,"ne","","",33,[[["self"],["containerdnat"]],["bool"]]],[11,"eq","","",34,[[["self"],["containerdnatrule"]],["bool"]]],[11,"ne","","",34,[[["self"],["containerdnatrule"]],["bool"]]],[11,"eq","","",35,[[["self"],["chainpolicy"]],["bool"]]],[11,"eq","","",36,[[["self"],["ruleverdict"]],["bool"]]],[11,"fmt","dfw::errors","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","dfw::iptables::types","",8,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",9,[[["formatter"],["self"]],["result"]]],[11,"fmt","dfw::iptables","",10,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","dfw::nftables::types","",14,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",15,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",16,[[["formatter"],["self"]],["result"]]],[11,"fmt","dfw::nftables","",39,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",11,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",12,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",13,[[["formatter"],["self"]],["result"]]],[11,"fmt","dfw::process","",18,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",17,[[["formatter"],["self"]],["result"]]],[11,"fmt","dfw::types","",21,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",22,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",23,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",24,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",25,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",26,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",27,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",28,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",29,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",30,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",31,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",33,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",34,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",35,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",36,[[["formatter"],["self"]],["result"]]],[11,"fmt","dfw::errors","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","dfw::nftables","",11,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",12,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",13,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","dfw::types","",35,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",36,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"hash","dfw::nftables::types","",15,[[["self"],["__h"]]]],[11,"hash","dfw::types","",22,[[["self"],["__h"]]]],[11,"hash","","",23,[[["self"],["__h"]]]],[11,"hash","","",24,[[["self"],["__h"]]]],[11,"hash","","",25,[[["self"],["__h"]]]],[11,"hash","","",26,[[["self"],["__h"]]]],[11,"hash","","",27,[[["self"],["__h"]]]],[11,"hash","","",28,[[["self"],["__h"]]]],[11,"hash","","",29,[[["self"],["__h"]]]],[11,"hash","","",30,[[["self"],["__h"]]]],[11,"hash","","",31,[[["self"],["__h"]]]],[11,"hash","","",33,[[["self"],["__h"]]]],[11,"hash","","",34,[[["self"],["__h"]]]],[11,"hash","","",35,[[["self"],["__h"]]]],[11,"hash","","",36,[[["self"],["__h"]]]],[11,"from_str","","Convert a formatted string into a `ExposePort`.",31,[[["str"]],["result"]]],[11,"from_str","","",35,[[["str"]],[["result",["chainpolicy"]],["chainpolicy"]]]],[11,"from_str","","",36,[[["str"]],[["result",["ruleverdict"]],["ruleverdict"]]]],[11,"deserialize","dfw::iptables::types","",8,[[["__d"]],["result"]]],[11,"deserialize","","",9,[[["__d"]],["result"]]],[11,"deserialize","dfw::nftables::types","",14,[[["__d"]],["result"]]],[11,"deserialize","","",15,[[["__d"]],["result"]]],[11,"deserialize","","",16,[[["__d"]],["result"]]],[11,"deserialize","dfw::types","",21,[[["__d"]],["result"]]],[11,"deserialize","","",22,[[["__d"]],["result"]]],[11,"deserialize","","",23,[[["__d"]],["result"]]],[11,"deserialize","","",24,[[["__d"]],["result"]]],[11,"deserialize","","",25,[[["__d"]],["result"]]],[11,"deserialize","","",26,[[["__d"]],["result"]]],[11,"deserialize","","",27,[[["__d"]],["result"]]],[11,"deserialize","","",28,[[["__d"]],["result"]]],[11,"deserialize","","",29,[[["__d"]],["result"]]],[11,"deserialize","","",30,[[["__d"]],["result"]]],[11,"deserialize","","",31,[[["__d"]],["result"]]],[11,"deserialize","","",33,[[["__d"]],["result"]]],[11,"deserialize","","",34,[[["__d"]],["result"]]],[11,"deserialize","","",35,[[["__d"]],["result"]]],[11,"deserialize","","",36,[[["__d"]],["result"]]],[11,"name","dfw::errors","",0,[[["self"]],[["str"],["option",["str"]]]]],[11,"cause","","",0,[[["self"]],[["option",["fail"]],["fail"]]]],[11,"backtrace","","",0,[[["self"]],[["backtrace"],["option",["backtrace"]]]]],[11,"serialize","dfw::types","",35,[[["record"],["key"],["serializer"],["self"]],["result"]]],[11,"serialize","","",36,[[["record"],["key"],["serializer"],["self"]],["result"]]]],"p":[[4,"DFWError"],[13,"NFTablesError"],[13,"TraitMethodUnimplemented"],[4,"IptablesRule"],[4,"IptablesRuleDiscriminants"],[4,"PolicyOrRule"],[13,"Policy"],[13,"Rule"],[3,"Defaults"],[3,"Initialization"],[3,"Iptables"],[4,"Family"],[4,"Type"],[4,"Hook"],[3,"Defaults"],[3,"Table"],[3,"Initialization"],[3,"ProcessingOptions"],[4,"ContainerFilter"],[8,"Process"],[3,"ProcessContext"],[3,"DFW"],[3,"GlobalDefaults"],[3,"ContainerToContainer"],[3,"ContainerToContainerRule"],[3,"ContainerToWiderWorld"],[3,"ContainerToWiderWorldRule"],[3,"ContainerToHost"],[3,"ContainerToHostRule"],[3,"WiderWorldToContainer"],[3,"WiderWorldToContainerRule"],[3,"ExposePort"],[3,"ExposePortBuilder"],[3,"ContainerDNAT"],[3,"ContainerDNATRule"],[4,"ChainPolicy"],[4,"RuleVerdict"],[8,"FutureExt"],[8,"FirewallBackend"],[3,"Nftables"]]};
addSearchOptions(searchIndex);initSearch(searchIndex);